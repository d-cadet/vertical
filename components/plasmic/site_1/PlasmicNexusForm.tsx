// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ccEeFTqGM7N6MKNn3Axffo
// Component: CukkPgCkjNZW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSteps } from "@plasmicpkgs/antd5/skinny/registerSteps";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ccEeFTqGM7N6MKNn3Axffo/projectcss
import sty from "./PlasmicNexusForm.module.css"; // plasmic-import: CukkPgCkjNZW/css

createPlasmicElementProxy;

export type PlasmicNexusForm__VariantMembers = {};
export type PlasmicNexusForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicNexusForm__VariantsArgs;
export const PlasmicNexusForm__VariantProps = new Array<VariantPropType>();

export type PlasmicNexusForm__ArgsType = {
  formSlug?: string;
};
type ArgPropType = keyof PlasmicNexusForm__ArgsType;
export const PlasmicNexusForm__ArgProps = new Array<ArgPropType>("formSlug");

export type PlasmicNexusForm__OverridesType = {
  root?: Flex__<typeof GraphqlFetcher>;
  freeBox?: Flex__<"div">;
  section?: Flex__<"section">;
  h3?: Flex__<"h3">;
  dd?: Flex__<"dd">;
  form?: Flex__<typeof FormWrapper>;
  button?: Flex__<typeof AntdButton>;
  steps?: Flex__<typeof AntdSteps>;
};

export interface DefaultNexusFormProps {
  formSlug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNexusForm__RenderFunc(props: {
  variants: PlasmicNexusForm__VariantsArgs;
  args: PlasmicNexusForm__ArgsType;
  overrides: PlasmicNexusForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form[].value",
        type: "private",
        variableType: "object",

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "steps.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <GraphqlFetcher
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      dataName={"fetchedData"}
      errorDisplay={
        <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
      }
      errorName={"fetchError"}
      headers={{
        "Content-Type": "application/json",
        Accept: "application/json"
      }}
      loadingDisplay={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9NFY
              )}
            >
              {"Loading..."}
            </div>
          )}
        </DataCtxReader__>
      }
      method={"POST"}
      noLayout={false}
      previewSpinner={false}
      query={{
        query:
          "query Query($filters: FormFilters) {\n  form(filters: $filters) {\n    steps\n    title\n    description\n    requestType\n    reference\n  }\n}\n",
        variables: { filters: { formSlug: "documentation-request" } }
      }}
      url={"https://graphql.integration.pointfranchise.co.uk/"}
      varOverrides={(() => {
        try {
          return { filters: { formSlug: $props.formSlug } };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return {};
          }
          throw e;
        }
      })()}
    >
      <DataCtxReader__>
        {$ctx => (
          <React.Fragment>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $ctx.fetchedData.data.form.steps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                  key={currentIndex}
                >
                  {(() => {
                    try {
                      return (
                        currentItem.id == "step" + ($state.steps.current + 1)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      data-plasmic-name={"section"}
                      data-plasmic-override={overrides.section}
                      className={classNames(projectcss.all, sty.section)}
                    >
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h3>
                      <dd
                        data-plasmic-name={"dd"}
                        data-plasmic-override={overrides.dd}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.dd
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.subtitle;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </dd>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", __plasmic_idx_0, "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: undefined,
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: undefined,
                          onFinish: async values => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.steps.current <
                                          $ctx.fetchedData.data.form.steps
                                            .length -
                                            1
                                        ) {
                                          return $state.steps.current++;
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", __plasmic_idx_0, "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form[].value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form[].isSubmitting"
                            }
                          ],
                          [__plasmic_idx_0],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__b0QYm
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.steps.current + 1 >=
                                        $ctx.fetchedData.data.form.steps.length
                                        ? "Send"
                                        : "Next";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Submit";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </AntdButton>
                          </FormWrapper>
                        );
                      })()}
                    </section>
                  ) : null}
                </div>
              );
            })}
            <AntdSteps
              data-plasmic-name={"steps"}
              data-plasmic-override={overrides.steps}
              className={classNames("__wab_instance", sty.steps)}
              current={generateStateValueProp($state, ["steps", "current"])}
              items={(() => {
                try {
                  return $ctx.fetchedData.data.form.steps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [
                      {
                        title: "Applied",
                        description: "Application has been submitted."
                      },
                      {
                        title: "In Review",
                        description: "Application is being reviewed."
                      },
                      {
                        title: "Closed",
                        description: "Final decision on the application."
                      }
                    ];
                  }
                  throw e;
                }
              })()}
              onChange={generateStateOnChangeProp($state, ["steps", "current"])}
              progressDot={false}
              responsive={false}
              type={"default"}
            />
          </React.Fragment>
        )}
      </DataCtxReader__>
    </GraphqlFetcher>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "section", "h3", "dd", "form", "button", "steps"],
  freeBox: ["freeBox", "section", "h3", "dd", "form", "button"],
  section: ["section", "h3", "dd", "form", "button"],
  h3: ["h3"],
  dd: ["dd"],
  form: ["form", "button"],
  button: ["button"],
  steps: ["steps"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof GraphqlFetcher;
  freeBox: "div";
  section: "section";
  h3: "h3";
  dd: "dd";
  form: typeof FormWrapper;
  button: typeof AntdButton;
  steps: typeof AntdSteps;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNexusForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNexusForm__VariantsArgs;
    args?: PlasmicNexusForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNexusForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNexusForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNexusForm__ArgProps,
          internalVariantPropNames: PlasmicNexusForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNexusForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNexusForm";
  } else {
    func.displayName = `PlasmicNexusForm.${nodeName}`;
  }
  return func;
}

export const PlasmicNexusForm = Object.assign(
  // Top-level PlasmicNexusForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    h3: makeNodeComponent("h3"),
    dd: makeNodeComponent("dd"),
    form: makeNodeComponent("form"),
    button: makeNodeComponent("button"),
    steps: makeNodeComponent("steps"),

    // Metadata about props expected for PlasmicNexusForm
    internalVariantProps: PlasmicNexusForm__VariantProps,
    internalArgProps: PlasmicNexusForm__ArgProps
  }
);

export default PlasmicNexusForm;
/* prettier-ignore-end */
