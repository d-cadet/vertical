// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ccEeFTqGM7N6MKNn3Axffo
// Component: Zeai8OtfKpIc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ccEeFTqGM7N6MKNn3Axffo/projectcss
import sty from "./PlasmicArticle.module.css"; // plasmic-import: Zeai8OtfKpIc/css

createPlasmicElementProxy;

export type PlasmicArticle__VariantMembers = {};
export type PlasmicArticle__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticle__VariantsArgs;
export const PlasmicArticle__VariantProps = new Array<VariantPropType>();

export type PlasmicArticle__ArgsType = {};
type ArgPropType = keyof PlasmicArticle__ArgsType;
export const PlasmicArticle__ArgProps = new Array<ArgPropType>();

export type PlasmicArticle__OverridesType = {
  root?: Flex__<"div">;
  graphQlFetcher?: Flex__<typeof GraphqlFetcher>;
  freeBox?: Flex__<"div">;
  section?: Flex__<"section">;
  text?: Flex__<"div">;
};

export interface DefaultArticleProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticle__RenderFunc(props: {
  variants: PlasmicArticle__VariantsArgs;
  args: PlasmicArticle__ArgsType;
  overrides: PlasmicArticle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <GraphqlFetcher
            data-plasmic-name={"graphQlFetcher"}
            data-plasmic-override={overrides.graphQlFetcher}
            className={classNames("__wab_instance", sty.graphQlFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"POST"}
            noLayout={false}
            query={{
              query:
                "query MyQuery($slug: String) {\n  edito(slug: $slug) {\n    section {\n      content\n      type\n    }\n    dates {\n      publishedAt\n    }\n    cover {\n      data {\n        url\n      }\n    }\n    title\n    type\n    sector {\n      title\n      value\n      slug\n      count\n    }\n    introduction\n  }\n}\n",
              variables: {
                slug: "10-clever-ways-to-protect-your-mental-health-as-a-franchisee"
              }
            }}
            url={"https://graphql.integration.toute-la-franchise.com/"}
            varOverrides={(() => {
              try {
                return { slug: $ctx.params.slug };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {};
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx =>
                (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.fetchedData.data.edito.section;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                      key={currentIndex}
                    >
                      {(() => {
                        try {
                          return currentItem.type == "text";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"section"}
                          data-plasmic-override={overrides.section}
                          className={classNames(projectcss.all, sty.section)}
                        >
                          <div
                            data-plasmic-name={"text"}
                            data-plasmic-override={overrides.text}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (() => {
                                      function markdown(src) {
                                        var rx_lt = /</g;
                                        var rx_gt = />/g;
                                        var rx_space = /\t|\r|\uf8ff/g;
                                        var rx_escape =
                                          /\\([\\\|`*_{}\[\]()#+\-~])/g;
                                        var rx_hr = /^([*\-=_] *){3,}$/gm;
                                        var rx_blockquote =
                                          /\n *> *([^]*?)(?=(\n|$){2})/g;
                                        var rx_list =
                                          /\n( *)(?:[*\-+]|((\d+)|([a-z])|[A-Z])[.)]) +([^]*?)(?=(\n|$){2})/g;
                                        var rx_listjoin =
                                          /<\/(ol|ul)>\n\n<\1>/g;
                                        var rx_highlight =
                                          /(^|[^A-Za-z\d\\])(([*_])|(~)|(\^)|(--)|(\+\+)|`)(\2?)([^<]*?)\2\8(?!\2)(?=\W|_|$)/g;
                                        var rx_code =
                                          /\n((```|~~~).*\n?([^]*?)\n?\2|((    .*?\n)+))/g;
                                        var rx_link =
                                          /((!?)\[(.*?)\]\((.*?)( ".*")?\)|\\([\\`*_{}\[\]()#+\-.!~]))/g;
                                        var rx_table = /\n(( *\|.*?\| *\n)+)/g;
                                        var rx_thead =
                                          /^.*\n( *\|( *\:?-+\:?-+\:? *\|)* *\n|)/;
                                        var rx_row = /.*\n/g;
                                        var rx_cell = /\||(.*?[^\\])\|/g;
                                        var rx_heading =
                                          /(?=^|>|\n)([>\s]*?)(#{1,6}) (.*?)( #*)? *(?=\n|$)/g;
                                        var rx_para =
                                          /(?=^|>|\n)\s*\n+([^<]+?)\n+\s*(?=\n|<|$)/g;
                                        var rx_stash = /-\d+\uf8ff/g;
                                        function replace(rex, fn) {
                                          src = src.replace(rex, fn);
                                        }
                                        function element(tag, content) {
                                          return (
                                            "<" +
                                            tag +
                                            ">" +
                                            content +
                                            "</" +
                                            tag +
                                            ">"
                                          );
                                        }
                                        function blockquote(src) {
                                          return src.replace(
                                            rx_blockquote,
                                            function (all, content) {
                                              return element(
                                                "blockquote",
                                                blockquote(
                                                  highlight(
                                                    content.replace(
                                                      /^ *> */gm,
                                                      ""
                                                    )
                                                  )
                                                )
                                              );
                                            }
                                          );
                                        }
                                        function list(src) {
                                          return src.replace(
                                            rx_list,
                                            function (
                                              all,
                                              ind,
                                              ol,
                                              num,
                                              low,
                                              content
                                            ) {
                                              var entry = element(
                                                "li",
                                                highlight(
                                                  content
                                                    .split(
                                                      RegExp(
                                                        "\n ?" +
                                                          ind +
                                                          "(?:(?:\\d+|[a-zA-Z])[.)]|[*\\-+]) +",
                                                        "g"
                                                      )
                                                    )
                                                    .map(list)
                                                    .join("</li><li>")
                                                )
                                              );
                                              return (
                                                "\n" +
                                                (ol
                                                  ? '<ol start="' +
                                                    (num
                                                      ? ol + '">'
                                                      : parseInt(ol, 36) -
                                                        9 +
                                                        '" style="list-style-type:' +
                                                        (low ? "low" : "upp") +
                                                        'er-alpha">') +
                                                    entry +
                                                    "</ol>"
                                                  : element("ul", entry))
                                              );
                                            }
                                          );
                                        }
                                        function highlight(src) {
                                          return src.replace(
                                            rx_highlight,
                                            function (
                                              all,
                                              _,
                                              p1,
                                              emp,
                                              sub,
                                              sup,
                                              small,
                                              big,
                                              p2,
                                              content
                                            ) {
                                              return (
                                                _ +
                                                element(
                                                  emp
                                                    ? p2
                                                      ? "strong"
                                                      : "em"
                                                    : sub
                                                    ? p2
                                                      ? "s"
                                                      : "sub"
                                                    : sup
                                                    ? "sup"
                                                    : small
                                                    ? "small"
                                                    : big
                                                    ? "big"
                                                    : "code",
                                                  highlight(content)
                                                )
                                              );
                                            }
                                          );
                                        }
                                        function unesc(str) {
                                          return str.replace(rx_escape, "$1");
                                        }
                                        var stash = [];
                                        var si = 0;
                                        src = "\n" + src + "\n";
                                        replace(rx_lt, "<");
                                        replace(rx_gt, ">");
                                        replace(rx_space, "  ");
                                        src = blockquote(src);
                                        replace(rx_hr, "<hr/>");
                                        src = list(src);
                                        replace(rx_listjoin, "");
                                        replace(
                                          rx_code,
                                          function (all, p1, p2, p3, p4) {
                                            stash[--si] = element(
                                              "pre",
                                              element(
                                                "code",
                                                p3 || p4.replace(/^    /gm, "")
                                              )
                                            );
                                            return si + "\uF8FF";
                                          }
                                        );
                                        replace(
                                          rx_link,
                                          function (
                                            all,
                                            p1,
                                            p2,
                                            p3,
                                            p4,
                                            p5,
                                            p6
                                          ) {
                                            stash[--si] = p4
                                              ? p2
                                                ? '<img src="' +
                                                  p4 +
                                                  '" alt="' +
                                                  p3 +
                                                  '"/>'
                                                : '<a href="' +
                                                  p4 +
                                                  '">' +
                                                  unesc(highlight(p3)) +
                                                  "</a>"
                                              : p6;
                                            return si + "\uF8FF";
                                          }
                                        );
                                        replace(
                                          rx_table,
                                          function (all, table) {
                                            var sep = table.match(rx_thead)[1];
                                            return (
                                              "\n" +
                                              element(
                                                "table",
                                                table.replace(
                                                  rx_row,
                                                  function (row, ri) {
                                                    return row == sep
                                                      ? ""
                                                      : element(
                                                          "tr",
                                                          row.replace(
                                                            rx_cell,
                                                            function (
                                                              all,
                                                              cell,
                                                              ci
                                                            ) {
                                                              return ci
                                                                ? element(
                                                                    sep && !ri
                                                                      ? "th"
                                                                      : "td",
                                                                    unesc(
                                                                      highlight(
                                                                        cell ||
                                                                          ""
                                                                      )
                                                                    )
                                                                  )
                                                                : "";
                                                            }
                                                          )
                                                        );
                                                  }
                                                )
                                              )
                                            );
                                          }
                                        );
                                        replace(
                                          rx_heading,
                                          function (all, _, p1, p2) {
                                            return (
                                              _ +
                                              element(
                                                "h" + p1.length,
                                                unesc(highlight(p2))
                                              )
                                            );
                                          }
                                        );
                                        replace(
                                          rx_para,
                                          function (all, content) {
                                            return element(
                                              "p",
                                              unesc(highlight(content))
                                            );
                                          }
                                        );
                                        replace(rx_stash, function (all) {
                                          return stash[parseInt(all)];
                                        });
                                        return src.trim();
                                      }
                                      return markdown(currentItem.content);
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </div>
                        </section>
                      ) : null}
                    </div>
                  );
                })
              }
            </DataCtxReader__>
          </GraphqlFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "graphQlFetcher", "freeBox", "section", "text"],
  graphQlFetcher: ["graphQlFetcher", "freeBox", "section", "text"],
  freeBox: ["freeBox", "section", "text"],
  section: ["section", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  graphQlFetcher: typeof GraphqlFetcher;
  freeBox: "div";
  section: "section";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticle__VariantsArgs;
    args?: PlasmicArticle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicArticle__ArgProps,
          internalVariantPropNames: PlasmicArticle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticle";
  } else {
    func.displayName = `PlasmicArticle.${nodeName}`;
  }
  return func;
}

export const PlasmicArticle = Object.assign(
  // Top-level PlasmicArticle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicArticle
    internalVariantProps: PlasmicArticle__VariantProps,
    internalArgProps: PlasmicArticle__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicArticle;
/* prettier-ignore-end */
